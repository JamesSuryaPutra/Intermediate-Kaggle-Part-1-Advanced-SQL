<Introduction>
Here, you'll use window functions to answer questions about the Chicago Taxi Trips dataset.
Before you get started, run the code cell below to set everything up.

****************
# Get most recent checking code
!pip install -U -t /kaggle/working/ git+https://github.com/Kaggle/learntools.git
# Set up feedback system
from learntools.core import binder
binder.bind(globals())
from learntools.sql_advanced.ex2 import *
print("Setup Complete")

Collecting git+https://github.com/Kaggle/learntools.git
  Cloning https://github.com/Kaggle/learntools.git to /tmp/pip-req-build-w9yugb4f
  Running command git clone --filter=blob:none --quiet https://github.com/Kaggle/learntools.git /tmp/pip-req-build-w9yugb4f
  Resolved https://github.com/Kaggle/learntools.git to commit 5f27cee8b5232dd374cec7e7a831d4bf4fb73e8f
  Preparing metadata (setup.py) ... done
Building wheels for collected packages: learntools
  Building wheel for learntools (setup.py) ... done
  Created wheel for learntools: filename=learntools-0.3.4-py3-none-any.whl size=268968 sha256=ba1e62097f3c61aa1e8aef7c274e2701ffdcb39bb847b886eaff76bb6d1be6b7
  Stored in directory: /tmp/pip-ephem-wheel-cache-o6nh983u/wheels/2f/6c/3c/aa9f50cfb5a862157cb4c7a5b34881828cf45404698255dced
Successfully built learntools
Installing collected packages: learntools
Successfully installed learntools-0.3.4
Using Kaggle's public dataset BigQuery integration.
Setup Complete
****************

The following code cell fetches the taxi_trips table from the chicago_taxi_trips dataset. We also preview the first five rows of the table. You'll use the table to answer the questions
below.

****************
from google.cloud import bigquery
​
# Create a "Client" object
client = bigquery.Client()
​
# Construct a reference to the "chicago_taxi_trips" dataset
dataset_ref = client.dataset("chicago_taxi_trips", project="bigquery-public-data")
​
# API request - fetch the dataset
dataset = client.get_dataset(dataset_ref)
​
# Construct a reference to the "taxi_trips" table
table_ref = dataset_ref.table("taxi_trips")
​
# API request - fetch the table
table = client.get_table(table_ref)
​
# Preview the first five lines of the table
client.list_rows(table, max_results=5).to_dataframe()

Using Kaggle's public dataset BigQuery integration.

unique_key	taxi_id	trip_start_timestamp	trip_end_timestamp	trip_seconds	trip_miles	pickup_census_tract	dropoff_census_tract	pickup_community_area	dropoff_community_area	...	extras	trip_total	payment_type	company	pickup_latitude	pickup_longitude	pickup_location	dropoff_latitude	dropoff_longitude	dropoff_location
0	451b0f8db9fceca460f22f05aba5b13a1b670cab	9b9e44c129b4382098a2bceccf6f941ee1bf1d25c7b24d...	2019-05-12 05:45:00+00:00	2019-05-12 06:00:00+00:00	1380	19.10	NaN	NaN	11	71	...	0.0	47.00	Cash	Taxi Affiliation Services	41.978830	-87.771167	POINT (-87.771166703 41.9788295262)	41.744205	-87.656306	POINT (-87.6563059862 41.7442051463)
1	4523f0f3e6be1d3b214c7a2f94789fdb48798afc	5413bb090b3b9f8f31943d28629c5fa9aa64bf2da5f140...	2019-05-16 19:00:00+00:00	2019-05-16 19:15:00+00:00	1440	3.00	1.703108e+10	1.703124e+10	8	24	...	0.0	14.25	Credit Card	Medallion Leasin	41.907492	-87.635760	POINT (-87.6357600901 41.9074919303)	41.899507	-87.679600	POINT (-87.6796002867 41.8995065476)
2	451e3b59572acb6feddf747acc0c59df316d80db	3cc07933fdf2b81d7ba8ad2e7eff9b52c2a427e45ead57...	2019-05-11 10:15:00+00:00	2019-05-11 10:45:00+00:00	1680	0.00	NaN	NaN	30	43	...	0.0	3.25	Cash	Blue Ribbon Taxi Association Inc.	41.839087	-87.714004	POINT (-87.714003807 41.8390869059)	41.761578	-87.572782	POINT (-87.5727819867 41.7615779081)
3	451853bbf108cc7a3ec3460e4439aff87922bcd5	13211c2747462616a339ca520978b83ccd7fe5c490b860...	2019-05-19 01:00:00+00:00	2019-05-19 01:00:00+00:00	0	0.00	NaN	NaN	19	19	...	0.0	3.25	Cash	Taxi Affiliation Services	41.927261	-87.765502	POINT (-87.7655016086 41.9272609555)	41.927261	-87.765502	POINT (-87.7655016086 41.9272609555)
4	4519480451600c55706d4b9937b4db0a4842b206	f0d3346678be38422d39a57255c327ec348ad690f71c25...	2019-05-25 18:45:00+00:00	2019-05-25 19:00:00+00:00	789	3.26	NaN	NaN	19	23	...	0.0	11.75	Cash	Flash Cab	41.927261	-87.765502	POINT (-87.7655016086 41.9272609555)	41.900070	-87.720918	POINT (-87.7209182385 41.9000696026)
5 rows × 23 columns
****************

<Exercise 1 - How can you predict the demand for taxis?>
Say you work for a taxi company, and you're interested in predicting the demand for taxis. Towards this goal, you'd like to create a plot that shows a rolling average of the daily number
of taxi trips. Amend the (partial) query below to return a DataFrame with two columns:
1} trip_date - contains one entry for each date from January 1, 2016, to March 31, 2016.
2} avg_num_trips - shows the average number of daily trips, calculated over a window including the value for the current date, along with the values for the preceding 3 days and the
following 3 days, as long as the days fit within the three-month time frame. For instance, when calculating the value in this column for January 3, 2016, the window will include the
number of trips for the preceding 2 days, the current date, and the following 3 days.

This query is partially completed for you, and you need only write the part that calculates the avg_num_trips column. Note that this query uses a common table expression (CTE); if you
need to review how to use CTEs, you're encouraged to check out this tutorial in the Intro to SQL course.

****************
# Fill in the blank below
avg_num_trips_query = """
                      WITH trips_by_day AS
                      (
                      SELECT DATE(trip_start_timestamp) AS trip_date,
                          COUNT(*) as num_trips
                      FROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`
                      WHERE trip_start_timestamp > '2016-01-01' AND trip_start_timestamp < '2016-04-01'
                      GROUP BY trip_date
                      ORDER BY trip_date
                      )
                      SELECT trip_date,
                          AVG(num_trips)
                          OVER (
                               ORDER BY trip_date
                               ROWS BETWEEN 3 PRECEDING AND 3 FOLLOWING
                               ) AS avg_num_trips
                      FROM trips_by_day
                      """
​
# Check your answer
q_1.check()

trip_date	avg_num_trips
0	2016-01-28	80813.142857
1	2016-02-26	92183.285714
2	2016-02-11	94508.714286
3	2016-02-10	91321.142857
4	2016-03-05	93470.714286

Correct

# Lines below will give you a hint or solution code
q_1.hint()
q_1.solution()

Hint:
Use the AVG() function. Write an OVER clause with that orders the rows with the trip_date column and uses a window that includes the 3 preceding rows, the current row, and the following
3 rows.

Solution:
avg_num_trips_query = """
                      WITH trips_by_day AS
                      (
                      SELECT DATE(trip_start_timestamp) AS trip_date,
                          COUNT(*) as num_trips
                      FROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`
                      WHERE trip_start_timestamp > '2016-01-01' AND trip_start_timestamp < '2016-04-01'
                      GROUP BY trip_date
                      )
                      SELECT trip_date,
                          AVG(num_trips) 
                          OVER (
                               ORDER BY trip_date
                               ROWS BETWEEN 3 PRECEDING AND 3 FOLLOWING
                               ) AS avg_num_trips
                      FROM trips_by_day
                      """
****************

<Exercise 2 - Can you separate and order trips by community area?>
The query below returns a DataFrame with three columns from the table: pickup_community_area, trip_start_timestamp, and trip_end_timestamp.

Amend the query to return an additional column called trip_number which shows the order in which the trips were taken from their respective community areas. So, the first trip of the
day originating from community area 1 should receive a value of 1; the second trip of the day from the same area should receive a value of 2. Likewise, the first trip of the day from
community area 2 should receive a value of 1, and so on.

Note that there are many numbering functions that can be used to solve this problem (depending on how you want to deal with trips that started at the same time from the same community
area); to answer this question, please use the RANK() function.

****************
# Amend the query below
trip_number_query = """
                    SELECT pickup_community_area,
                        trip_start_timestamp,
                        trip_end_timestamp,
                        RANK()
                            OVER (
                                  PARTITION BY pickup_community_area
                                  ORDER BY trip_start_timestamp
                                 ) AS trip_number
                    FROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`
                    WHERE DATE(trip_start_timestamp) = '2013-10-03'
                    """
​
# Check your answer
q_2.check()

pickup_community_area	trip_start_timestamp	trip_end_timestamp	trip_number
0	41.0	2013-10-03 00:00:00+00:00	2013-10-03 00:15:00+00:00	1
1	41.0	2013-10-03 00:30:00+00:00	2013-10-03 00:45:00+00:00	2
2	41.0	2013-10-03 00:45:00+00:00	2013-10-03 00:45:00+00:00	3
3	41.0	2013-10-03 01:45:00+00:00	2013-10-03 01:45:00+00:00	4
4	41.0	2013-10-03 01:45:00+00:00	2013-10-03 01:45:00+00:00	4

Correct

# Lines below will give you a hint or solution code
q_2.hint()
q_2.solution()

Hint:
You don't need a GROUP BY clause. Use the RANK() function. Your OVER clause should order the rows by the trip_start_timestamp column and break the data into partitions based on
pickup_community_area.

Solution:
trip_number_query = """
                    SELECT pickup_community_area,
                        trip_start_timestamp,
                        trip_end_timestamp,
                        RANK()
                            OVER (
                                  PARTITION BY pickup_community_area
                                  ORDER BY trip_start_timestamp
                                 ) AS trip_number
                    FROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`
                    WHERE DATE(trip_start_timestamp) = '2013-10-03' 
                    """

trip_number_result = client.query(trip_number_query).result().to_dataframe()
****************

<Exercise 3 - How much time elapses between trips?>
The (partial) query in the code cell below shows, for each trip in the selected time frame, the corresponding taxi_id, trip_start_timestamp, and trip_end_timestamp.

Your task in this exercise is to edit the query to include an additional prev_break column that shows the length of the break (in minutes) that the driver had before each trip started
(this corresponds to the time between trip_start_timestamp of the current trip and trip_end_timestamp of the previous trip). Partition the calculation by taxi_id, and order the results
within each partition by trip_start_timestamp.

Some sample results are shown below, where all rows correspond to the same driver (or taxi_id). Take the time now to make sure that the values in the prev_break column make sense to you!
Note that the first trip of the day for each driver should have a value of NaN (not a number) in the prev_break column.

****************
# Fill in the blanks below
break_time_query = """
                   SELECT taxi_id,
                       trip_start_timestamp,
                       trip_end_timestamp,
                       TIMESTAMP_DIFF(
                           trip_start_timestamp, 
                           LAG(trip_end_timestamp, 1)
                               OVER (
                                    PARTITION BY taxi_id 
                                    ORDER BY trip_start_timestamp), 
                           MINUTE) as prev_break
                   FROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`
                   WHERE DATE(trip_start_timestamp) = '2013-10-03' 
                   """

# Check your answer
q_3.check()

taxi_id	trip_start_timestamp	trip_end_timestamp	prev_break
0	00752524a4118a162dce62ff49c0eb0f79530d9e0ecb5a...	2013-10-03 05:45:00+00:00	2013-10-03 06:00:00+00:00	315.0
1	00752524a4118a162dce62ff49c0eb0f79530d9e0ecb5a...	2013-10-03 19:30:00+00:00	2013-10-03 20:00:00+00:00	255.0
2	07780d6ed6024003f9fd2d0dae5b2af4e11e3303e73641...	2013-10-03 08:30:00+00:00	2013-10-03 08:45:00+00:00	285.0
3	2ace0a0c841190acb5513d4f011447a3e9df87da0cc213...	2013-10-03 08:00:00+00:00	2013-10-03 09:00:00+00:00	330.0
4	2ee325e10e1eec919fc5bfc4d64ed9951cbab4fb13b3e2...	2013-10-03 12:30:00+00:00	2013-10-03 12:30:00+00:00	165.0

Correct

# Lines below will give you a hint or solution code
q_3.hint()
q_3.solution()

Hint:
The TIMESTAMP_DIFF() function takes three arguments, where the first (trip_start_timestamp) and the last (MINUTE) are provided for you. This function provides the time difference
(in minutes) of the timestamps in the first two arguments. You need only fill in the second argument, which should use the LAG() function to pull the timestamp corresponding to the
end of the previous trip (for the same taxi_id).

Solution:
break_time_query = """
                   SELECT taxi_id,
                       trip_start_timestamp,
                       trip_end_timestamp,
                       TIMESTAMP_DIFF(
                           trip_start_timestamp, 
                           LAG(trip_end_timestamp, 1) OVER (PARTITION BY taxi_id ORDER BY trip_start_timestamp), 
                           MINUTE) as prev_break
                   FROM `bigquery-public-data.chicago_taxi_trips.taxi_trips`
                   WHERE DATE(trip_start_timestamp) = '2013-10-03' 
                   """

break_time_result = client.query(break_time_query).result().to_dataframe()
****************
